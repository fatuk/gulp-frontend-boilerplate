/* Micro ClearFix Mixin */
.clearfix {
	zoom: 1;
	&:before, &:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}
// Body message
.message (@msg) {
	body {
		&:before {
			content: @msg;
			position: fixed;
			left: 10px;
			bottom: 10px;
			display: inline-block;
			padding: 10px;
			background: orange;
			color: #fff;
		}
	}
}
// Dib fix
.dibfix {
	font-size: 0;
}
// Background image
.img(@img) {
	@img-path: '../img/@{img}';
	background: url(@img-path) no-repeat center;
	width: image-width(@img-path);
	height: image-height(@img-path);
}
.no-break() {
	white-space: nowrap;
}
.no-select() {
	user-select: none;
	cursor: default;
}
.no-wrap() {
	white-space: nowrap;
}
.dots() {
	overflow: hidden;
	text-overflow: ellipsis;
	.no-wrap();
}
.list-reset() {
	margin: 0;
	padding: 0;
	list-style-type: none;
}
.gradient (@startColor: #eee, @endColor: white) {
	background-color: @startColor;
	background: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
	background: -webkit-linear-gradient(top, @startColor, @endColor);
	background: -moz-linear-gradient(top, @startColor, @endColor);
	background: -ms-linear-gradient(top, @startColor, @endColor);
	background: -o-linear-gradient(top, @startColor, @endColor);
}
.horizontal-gradient (@startColor: #eee, @endColor: white) {
 	background-color: @startColor;
	background-image: -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
	background-image: -webkit-linear-gradient(left, @startColor, @endColor);
	background-image: -moz-linear-gradient(left, @startColor, @endColor);
	background-image: -ms-linear-gradient(left, @startColor, @endColor);
	background-image: -o-linear-gradient(left, @startColor, @endColor);
}
// Triangle
// Example:
// .triangle(up, 0.5em, #fff);
.triangle-base() {
    content: '';
    display: block;
    width: 0;
    height: 0;
}
.triangle(@direction, @size, @color) {
    .triangle(@direction, @size * 2, @size, @color);
}
.triangle(@direction, @width, @height, @color) when (@direction = up) {
    .triangle-base();
    border-left: (@width / 2)solid transparent;
    border-right: (@width / 2)solid transparent;
    border-bottom: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = down) {
    .triangle-base();
    border-left: (@width / 2) solid transparent;
    border-right: (@width / 2) solid transparent;
    border-top: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = left) {
    .triangle-base();
    border-top: (@width / 2) solid transparent;
    border-bottom: (@width / 2) solid transparent;
    border-right: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = right) {
    .triangle-base();
    border-top: (@width / 2) solid transparent;
    border-bottom: (@width / 2) solid transparent;
    border-left: @height solid @color;
}
// Rgba color resolver
.rgba(@attr: background, @color: orange, @opacity: .5) {
	@c1: #fff;
	@c2: @color;
	@{attr}: rgb((1 - @opacity) * red(@c1) + @opacity * red(@c2), (1 - @opacity) * green(@c1) + @opacity * green(@c2), (1 - @opacity) * blue(@c1) + @opacity * blue(@c2));
}
